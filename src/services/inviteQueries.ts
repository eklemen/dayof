import { httpsCallable } from '@react-native-firebase/functions';
import type { 
  SendInviteRequest, 
  SendInviteResponse, 
  InviteValidationResult,
  Invite 
} from '@/src/models/Invite';

// Initialize Firebase Functions with us-central1 region
const functions = httpsCallable;

/**
 * Send invites for an event
 */
export const sendEventInvite = async (
  eventId: string, 
  emails: string[]
): Promise<SendInviteResponse> => {
  try {
    const sendInviteCallable = functions('sendEventInviteFunction');
    const result = await sendInviteCallable({
      eventId,
      emails
    } as SendInviteRequest);

    return result.data as SendInviteResponse;
  } catch (error) {
    console.error('Error sending invites:', error);
    throw new Error('Failed to send invites');
  }
};

/**
 * Validate an invite token
 */
export const validateInviteToken = async (token: string): Promise<InviteValidationResult> => {
  try {
    const validateTokenCallable = functions('validateInviteTokenFunction');
    const result = await validateTokenCallable({ token });

    return result.data as InviteValidationResult;
  } catch (error) {
    console.error('Error validating invite token:', error);
    return {
      valid: false,
      error: 'not-found'
    };
  }
};

/**
 * Accept an invite
 */
export const acceptInvite = async (token: string): Promise<{ success: boolean; eventId?: string; error?: string }> => {
  try {
    const acceptInviteCallable = functions('acceptInviteFunction');
    const result = await acceptInviteCallable({ token });

    return result.data as { success: boolean; eventId?: string; error?: string };
  } catch (error) {
    console.error('Error accepting invite:', error);
    throw new Error('Failed to accept invite');
  }
};

/**
 * Get invite statistics for rate limiting
 */
export const getInviteStats = async (userId: string) => {
  try {
    const getStatsCallable = functions('getInviteStatsFunction');
    const result = await getStatsCallable({ userId });

    return result.data;
  } catch (error) {
    console.error('Error getting invite stats:', error);
    throw new Error('Failed to get invite statistics');
  }
};

/**
 * Generate a secure invite token (client-side utility)
 */
export const generateInviteToken = (): string => {
  // This is a client-side utility for testing
  // In production, tokens are generated by Cloud Functions
  const array = new Uint8Array(32);
  crypto.getRandomValues(array);
  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
};

/**
 * Validate email format
 */
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
};

/**
 * Validate invite token format
 */
export const isValidInviteToken = (token: string): boolean => {
  // 256-bit hex token should be 64 characters
  const tokenRegex = /^[a-f0-9]{64}$/;
  return tokenRegex.test(token);
};